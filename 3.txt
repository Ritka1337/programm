#include <iostream>

using namespace std;

struct Kirill

{
	int digit;
	Kirill* next, * before;
	Kirill()
	{
		next = before = NULL;
	}
};
Kirill* last = new Kirill;

int main()
{
	int line;
	for (;;)
	{
		cout << "\n 1-Add \n 2-Print \n 3-Delete \n";
		cin >> line;
		switch (line)
		{
		case 1: Add(); break;
		case 2: Print(); break;
		case 3: Delete(); break;
		}
	}
	return 0;
}

void Add()
{
	Kirill* Element = new Kirill;
	cin >> Element->digit;
	last->next = Element;
	Element->before = last;
	last = Element;
}

void Print()
{
	Kirill* tmp = last;
	for (; tmp->before; !NULL)
	{
		cout << tmp ->
			digit << "_";
		tmp = tmp->before;
	}
}

void Delete()
{
	int x;
	cin >> x;
	if (x == last->digit)
	{
		last = last->before;
		delete last->next;
		return;
	}
	Kirill* tmp = last;
	for (; tmp->before != NULL;)
	{
		if (tmp->digit == x)
		{
			tmp->before->next = tmp->next;
			tmp->next->before = tmp->before;
			delete tmp;
			return;
		}
		tmp = tmp->before;
	}
}#include <iostream>

using namespace std;

struct Kirill

{
	int digit;
	Kirill* next, * before;
	Kirill()
	{
		next = before = NULL;
	}
};
Kirill* last = new Kirill;

int main()
{
	int line;
	for (;;)
	{
		cout << "\n 1-Add \n 2-Print \n 3-Delete \n";
		cin >> line;
		switch (line)
		{
		case 1: Add(); break;
		case 2: Print(); break;
		case 3: Delete(); break;
		}
	}
	return 0;
}

void Add()
{
	Kirill* Element = new Kirill;
	cin >> Element->digit;
	last->next = Element;
	Element->before = last;
	last = Element;
}

void Print()
{
	Kirill* tmp = last;
	for (; tmp->before; !NULL)
	{
		cout << tmp ->
			digit << "_";
		tmp = tmp->before;
	}
}

void Delete()
{
	int x;
	cin >> x;
	if (x == last->digit)
	{
		last = last->before;
		delete last->next;
		return;
	}
	Kirill* tmp = last;
	for (; tmp->before != NULL;)
	{
		if (tmp->digit == x)
		{
			tmp->before->next = tmp->next;
			tmp->next->before = tmp->before;
			delete tmp;
			return;
		}
		tmp = tmp->before;
	}
}